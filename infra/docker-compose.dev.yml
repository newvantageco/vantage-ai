version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: vantage
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ..
      dockerfile: infra/Dockerfile.api
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql+psycopg://postgres:postgres@postgres:5432/vantage
      - REDIS_URL=redis://redis:6379
    env_file:
      - ../.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../app:/app/app
      - ../alembic:/app/alembic
      - ../alembic.ini:/app/alembic.ini
      - ../requirements.txt:/app/requirements.txt
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  web:
    build:
      context: ../web
      dockerfile: ../infra/Dockerfile.web
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_BASE=http://localhost:8000/api/v1
    env_file:
      - ../.env
    depends_on:
      - api
    volumes:
      - ../web:/app
      - /app/node_modules
    restart: unless-stopped

  worker-scheduler:
    build:
      context: ..
      dockerfile: infra/Dockerfile.worker
    command: python workers/scheduler_worker.py
    environment:
      - DATABASE_URL=postgresql+psycopg://postgres:postgres@postgres:5432/vantage
      - REDIS_URL=redis://redis:6379
    env_file:
      - ../.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../app:/app/app
      - ../workers:/app/workers
      - ../requirements.txt:/app/requirements.txt
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 60s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  worker-optimiser:
    build:
      context: ..
      dockerfile: infra/Dockerfile.worker
    command: python workers/optimiser_worker.py
    environment:
      - DATABASE_URL=postgresql+psycopg://postgres:postgres@postgres:5432/vantage
      - REDIS_URL=redis://redis:6379
    env_file:
      - ../.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../app:/app/app
      - ../workers:/app/workers
      - ../requirements.txt:/app/requirements.txt
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 60s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
