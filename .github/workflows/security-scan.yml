name: Security Scan

on:
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: web/package-lock.json

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety semgrep

    - name: Install Node.js dependencies
      run: |
        cd web
        npm ci

    - name: Run Bandit security scan
      run: |
        bandit -r app/ -f json -o bandit-report.json

    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json

    - name: Run Semgrep scan
      run: |
        semgrep --config=auto --json --output=semgrep-report.json app/

    - name: Run npm audit
      run: |
        cd web
        npm audit --audit-level=moderate --json > ../npm-audit-report.json

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          semgrep-report.json
          npm-audit-report.json

    - name: Comment PR with security findings
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          let comment = '## üîí Security Scan Results\n\n';
          
          // Read and process security reports
          try {
            const banditReport = JSON.parse(fs.readFileSync('bandit-report.json', 'utf8'));
            const highIssues = banditReport.results.filter(r => r.issue_severity === 'HIGH');
            const mediumIssues = banditReport.results.filter(r => r.issue_severity === 'MEDIUM');
            
            if (highIssues.length > 0 || mediumIssues.length > 0) {
              comment += '### ‚ö†Ô∏è Security Issues Found\n\n';
              
              if (highIssues.length > 0) {
                comment += `**High Severity Issues: ${highIssues.length}**\n`;
                highIssues.forEach(issue => {
                  comment += `- ${issue.issue_text} (${issue.filename}:${issue.line_number})\n`;
                });
                comment += '\n';
              }
              
              if (mediumIssues.length > 0) {
                comment += `**Medium Severity Issues: ${mediumIssues.length}**\n`;
                mediumIssues.forEach(issue => {
                  comment += `- ${issue.issue_text} (${issue.filename}:${issue.line_number})\n`;
                });
                comment += '\n';
              }
            } else {
              comment += '‚úÖ No security issues found!\n\n';
            }
          } catch (error) {
            comment += '‚ùå Error processing security reports\n\n';
          }
          
          comment += '---\n*Security scan completed*';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });