#!/usr/bin/env python3
"""
Script to show SQL that would be generated by safe migrations.
This helps verify the SQL before applying migrations.
"""

import os
import sys
from pathlib import Path

# Add the project root to Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

def show_migration_sql():
    """Show the SQL that would be generated by safe migrations."""
    
    print("=" * 80)
    print("SAFE MIGRATION SQL PREVIEW")
    print("=" * 80)
    print()
    
    print("⚠️  IMPORTANT: These migrations are ADDITIVE ONLY")
    print("   - No DROP operations will be performed")
    print("   - Tables/columns created only if they don't exist")
    print("   - Safe to run in production")
    print()
    
    # Migration 0011_safe_billing_models
    print("=" * 60)
    print("MIGRATION 0011_safe_billing_models.py")
    print("=" * 60)
    print()
    print("-- Create enums if they don't exist")
    print("CREATE TYPE IF NOT EXISTS plan_tier AS ENUM ('starter', 'growth', 'pro');")
    print("CREATE TYPE IF NOT EXISTS billing_status AS ENUM ('active', 'canceled', 'past_due', 'unpaid', 'incomplete', 'trialing');")
    print()
    print("-- Create organization_billing table if it doesn't exist")
    print("CREATE TABLE IF NOT EXISTS organization_billing (")
    print("    id VARCHAR(36) NOT NULL,")
    print("    org_id VARCHAR(36) NOT NULL,")
    print("    stripe_customer_id VARCHAR(255),")
    print("    stripe_subscription_id VARCHAR(255),")
    print("    plan plan_tier NOT NULL DEFAULT 'starter',")
    print("    status billing_status NOT NULL DEFAULT 'active',")
    print("    current_period_start TIMESTAMP,")
    print("    current_period_end TIMESTAMP,")
    print("    created_at TIMESTAMP NOT NULL,")
    print("    updated_at TIMESTAMP NOT NULL,")
    print("    trial_start TIMESTAMP,")
    print("    trial_end TIMESTAMP,")
    print("    trial_used BOOLEAN NOT NULL DEFAULT false,")
    print("    coupon_code VARCHAR(100),")
    print("    coupon_discount_percent INTEGER,")
    print("    coupon_discount_amount_cents INTEGER,")
    print("    coupon_expires_at TIMESTAMP,")
    print("    last_payment_date TIMESTAMP,")
    print("    last_payment_amount_cents INTEGER,")
    print("    next_payment_date TIMESTAMP,")
    print("    next_payment_amount_cents INTEGER,")
    print("    notes TEXT,")
    print("    PRIMARY KEY (id),")
    print("    UNIQUE (org_id),")
    print("    FOREIGN KEY(org_id) REFERENCES organizations (id) ON DELETE CASCADE")
    print(");")
    print()
    print("-- Create indexes")
    print("CREATE INDEX IF NOT EXISTS ix_organization_billing_org_id ON organization_billing (org_id);")
    print("CREATE INDEX IF NOT EXISTS ix_organization_billing_stripe_customer_id ON organization_billing (stripe_customer_id);")
    print("CREATE INDEX IF NOT EXISTS ix_organization_billing_stripe_subscription_id ON organization_billing (stripe_subscription_id);")
    print("CREATE INDEX IF NOT EXISTS ix_organization_billing_coupon_code ON organization_billing (coupon_code);")
    print()
    print("-- Create coupons table if it doesn't exist")
    print("CREATE TABLE IF NOT EXISTS coupons (")
    print("    id VARCHAR(36) NOT NULL,")
    print("    code VARCHAR(100) NOT NULL,")
    print("    name VARCHAR(255) NOT NULL,")
    print("    description TEXT,")
    print("    discount_type VARCHAR(20) NOT NULL,")
    print("    discount_value INTEGER NOT NULL,")
    print("    valid_from TIMESTAMP NOT NULL,")
    print("    valid_until TIMESTAMP,")
    print("    max_uses INTEGER,")
    print("    used_count INTEGER NOT NULL DEFAULT 0,")
    print("    applicable_plans TEXT,")
    print("    min_amount_cents INTEGER,")
    print("    is_active BOOLEAN NOT NULL DEFAULT true,")
    print("    created_at TIMESTAMP NOT NULL,")
    print("    updated_at TIMESTAMP NOT NULL,")
    print("    PRIMARY KEY (id)")
    print(");")
    print()
    print("CREATE UNIQUE INDEX IF NOT EXISTS ix_coupons_code ON coupons (code);")
    print("CREATE INDEX IF NOT EXISTS ix_coupons_is_active ON coupons (is_active);")
    print()
    print("-- Create billing_history table if it doesn't exist")
    print("CREATE TABLE IF NOT EXISTS billing_history (")
    print("    id VARCHAR(36) NOT NULL,")
    print("    org_id VARCHAR(36) NOT NULL,")
    print("    stripe_payment_intent_id VARCHAR(255),")
    print("    amount_cents INTEGER NOT NULL,")
    print("    currency VARCHAR(3) NOT NULL DEFAULT 'usd',")
    print("    description VARCHAR(500) NOT NULL,")
    print("    plan plan_tier NOT NULL,")
    print("    status VARCHAR(20) NOT NULL,")
    print("    coupon_code VARCHAR(100),")
    print("    discount_amount_cents INTEGER,")
    print("    created_at TIMESTAMP NOT NULL,")
    print("    processed_at TIMESTAMP,")
    print("    PRIMARY KEY (id),")
    print("    FOREIGN KEY(org_id) REFERENCES organizations (id) ON DELETE CASCADE")
    print(");")
    print()
    print("CREATE INDEX IF NOT EXISTS ix_billing_history_org_id ON billing_history (org_id);")
    print("CREATE INDEX IF NOT EXISTS ix_billing_history_stripe_payment_intent_id ON billing_history (stripe_payment_intent_id);")
    print()
    
    # Migration 0012_safe_templates_conversations
    print("=" * 60)
    print("MIGRATION 0012_safe_templates_conversations.py")
    print("=" * 60)
    print()
    print("-- Create template_type enum if it doesn't exist")
    print("CREATE TYPE IF NOT EXISTS template_type AS ENUM ('image', 'video');")
    print()
    print("-- Create asset_templates table if it doesn't exist")
    print("CREATE TABLE IF NOT EXISTS asset_templates (")
    print("    id VARCHAR(36) NOT NULL,")
    print("    org_id VARCHAR(36),")
    print("    name VARCHAR(255) NOT NULL,")
    print("    description TEXT,")
    print("    type template_type NOT NULL,")
    print("    spec JSON NOT NULL,")
    print("    is_public BOOLEAN NOT NULL DEFAULT false,")
    print("    created_at TIMESTAMP NOT NULL,")
    print("    created_by VARCHAR(36),")
    print("    PRIMARY KEY (id),")
    print("    UNIQUE (org_id, created_by),")
    print("    FOREIGN KEY(org_id) REFERENCES organizations (id) ON DELETE CASCADE,")
    print("    FOREIGN KEY(created_by) REFERENCES users (id) ON DELETE SET NULL")
    print(");")
    print()
    print("CREATE INDEX IF NOT EXISTS ix_asset_templates_org_id ON asset_templates (org_id);")
    print()
    print("-- Create template_usage table if it doesn't exist")
    print("CREATE TABLE IF NOT EXISTS template_usage (")
    print("    id VARCHAR(36) NOT NULL,")
    print("    template_id VARCHAR(36) NOT NULL,")
    print("    org_id VARCHAR(36) NOT NULL,")
    print("    content_item_id VARCHAR(36),")
    print("    used_at TIMESTAMP NOT NULL,")
    print("    inputs JSON,")
    print("    PRIMARY KEY (id),")
    print("    FOREIGN KEY(template_id) REFERENCES asset_templates (id) ON DELETE CASCADE,")
    print("    FOREIGN KEY(org_id) REFERENCES organizations (id) ON DELETE CASCADE,")
    print("    FOREIGN KEY(content_item_id) REFERENCES content_items (id) ON DELETE SET NULL")
    print(");")
    print()
    print("CREATE INDEX IF NOT EXISTS ix_template_usage_template_id ON template_usage (template_id);")
    print("CREATE INDEX IF NOT EXISTS ix_template_usage_org_id ON template_usage (org_id);")
    print("CREATE INDEX IF NOT EXISTS ix_template_usage_content_item_id ON template_usage (content_item_id);")
    print()
    print("-- Create conversations table if it doesn't exist")
    print("CREATE TABLE IF NOT EXISTS conversations (")
    print("    id VARCHAR(36) NOT NULL,")
    print("    org_id VARCHAR(36) NOT NULL,")
    print("    channel VARCHAR(32) NOT NULL,")
    print("    peer_id VARCHAR(255) NOT NULL,")
    print("    last_message_at TIMESTAMP,")
    print("    created_at TIMESTAMP NOT NULL,")
    print("    PRIMARY KEY (id),")
    print("    FOREIGN KEY(org_id) REFERENCES organizations (id) ON DELETE CASCADE")
    print(");")
    print()
    print("CREATE INDEX IF NOT EXISTS ix_conversations_org_id ON conversations (org_id);")
    print("CREATE INDEX IF NOT EXISTS ix_conversations_peer_id ON conversations (peer_id);")
    print()
    print("-- Create messages table if it doesn't exist")
    print("CREATE TABLE IF NOT EXISTS messages (")
    print("    id VARCHAR(36) NOT NULL,")
    print("    conversation_id VARCHAR(36) NOT NULL,")
    print("    direction VARCHAR(16) NOT NULL,")
    print("    text TEXT,")
    print("    media_url VARCHAR(500),")
    print("    metadata JSON,")
    print("    created_at TIMESTAMP NOT NULL,")
    print("    PRIMARY KEY (id),")
    print("    FOREIGN KEY(conversation_id) REFERENCES conversations (id) ON DELETE CASCADE")
    print(");")
    print()
    print("CREATE INDEX IF NOT EXISTS ix_messages_conversation_id ON messages (conversation_id);")
    print()
    
    # Migration 0013_safe_ai_budget
    print("=" * 60)
    print("MIGRATION 0013_safe_ai_budget.py")
    print("=" * 60)
    print()
    print("-- Create ai_budgets table if it doesn't exist")
    print("CREATE TABLE IF NOT EXISTS ai_budgets (")
    print("    id VARCHAR(36) NOT NULL,")
    print("    org_id VARCHAR(36) NOT NULL,")
    print("    daily_token_limit INTEGER NOT NULL DEFAULT 100000,")
    print("    daily_cost_limit_gbp FLOAT NOT NULL DEFAULT 50.0,")
    print("    current_date DATE NOT NULL DEFAULT CURRENT_DATE,")
    print("    tokens_used_today INTEGER NOT NULL DEFAULT 0,")
    print("    cost_gbp_today FLOAT NOT NULL DEFAULT 0.0,")
    print("    is_active BOOLEAN NOT NULL DEFAULT true,")
    print("    created_at TIMESTAMP NOT NULL DEFAULT NOW(),")
    print("    updated_at TIMESTAMP NOT NULL DEFAULT NOW(),")
    print("    PRIMARY KEY (id),")
    print("    FOREIGN KEY(org_id) REFERENCES organizations (id) ON DELETE CASCADE")
    print(");")
    print()
    print("CREATE INDEX IF NOT EXISTS ix_ai_budgets_org_id ON ai_budgets (org_id);")
    print()
    
    print("=" * 80)
    print("MIGRATION SUMMARY")
    print("=" * 80)
    print()
    print("✅ SAFE MIGRATIONS CREATED:")
    print("   - 0011_safe_billing_models.py")
    print("   - 0012_safe_templates_conversations.py") 
    print("   - 0013_safe_ai_budget.py")
    print()
    print("⚠️  SUPERSEDED MIGRATIONS (DO NOT USE):")
    print("   - 0004_billing_models.py (contains DROP operations)")
    print("   - 0005_templates_conversations.py (contains DROP operations)")
    print("   - 0009_ai_budget.py (contains DROP operations)")
    print("   - 0010_enhanced_billing.py (contains DROP operations)")
    print()
    print("📋 NEXT STEPS:")
    print("   1. Review the SQL above")
    print("   2. Test in staging environment")
    print("   3. Apply safe migrations: alembic upgrade 0013_safe_ai_budget")
    print("   4. Verify all tables exist and data is intact")
    print()

if __name__ == "__main__":
    show_migration_sql()
