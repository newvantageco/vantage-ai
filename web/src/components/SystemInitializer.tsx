"use client";

import { useEffect, useState } from 'react';
import { systemInitializer } from '@/lib/services/system-init';
import { eventEngine } from '@/lib/engines/event-engine';
import { taskQueueEngine } from '@/lib/engines/task-queue-engine';
import { analyticsEngine } from '@/lib/engines/analytics-engine';
import { contentEngine } from '@/lib/engines/content-engine';
import { aiEngine } from '@/lib/engines/ai-engine';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { 
  CheckCircle2, 
  XCircle, 
  Loader2, 
  Activity,
  Zap,
  Database,
  Brain,
  BarChart3,
  FileText
} from 'lucide-react';

interface SystemStatus {
  isInitialized: boolean;
  engines: {
    event: boolean;
    task: boolean;
    analytics: boolean;
    content: boolean;
    ai: boolean;
  };
  backend: {
    connected: boolean;
    lastCheck: Date | null;
  };
  stats: {
    events: number;
    tasks: number;
    metrics: number;
    content: number;
    aiRequests: number;
  };
}

export function SystemInitializer() {
  const [status, setStatus] = useState<SystemStatus>({
    isInitialized: false,
    engines: {
      event: false,
      task: false,
      analytics: false,
      content: false,
      ai: false
    },
    backend: {
      connected: false,
      lastCheck: null
    },
    stats: {
      events: 0,
      tasks: 0,
      metrics: 0,
      content: 0,
      aiRequests: 0
    }
  });

  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    initializeSystem();
  }, []);

  const initializeSystem = async () => {
    try {
      setIsLoading(true);
      
      // Initialize the system
      await systemInitializer.initialize();
      
      // Check engine status
      const engineStatus = {
        event: eventEngine.getEvents().length > 0,
        task: taskQueueEngine.getTasks().length > 0,
        analytics: analyticsEngine.getMetrics().length > 0,
        content: contentEngine.getContent().length > 0,
        ai: aiEngine.getProviders().length > 0
      };

      // Get stats
      const stats = {
        events: eventEngine.getEvents().length,
        tasks: taskQueueEngine.getTasks().length,
        metrics: analyticsEngine.getMetrics().length,
        content: contentEngine.getContent().length,
        aiRequests: aiEngine.getRequests().length
      };

      setStatus({
        isInitialized: true,
        engines: engineStatus,
        backend: {
          connected: true, // Assume connected for demo
          lastCheck: new Date()
        },
        stats
      });

      // Add some demo events to show the system is working
      eventEngine.addEvent({
        type: 'success',
        category: 'system',
        title: 'System Initialized',
        description: 'All engines are now running and ready',
        source: 'System Initializer',
        severity: 'low'
      });

      // Create some demo tasks
      taskQueueEngine.createTask({
        name: 'Load Initial Data',
        status: 'completed',
        progress: 100,
        category: 'system',
        priority: 'high',
        maxRetries: 3
      });

      taskQueueEngine.createTask({
        name: 'AI Content Generation',
        status: 'running',
        progress: 45,
        category: 'ai',
        priority: 'normal',
        maxRetries: 3
      });

    } catch (error) {
      console.error('Failed to initialize system:', error);
      setStatus(prev => ({
        ...prev,
        isInitialized: false,
        backend: { ...prev.backend, connected: false }
      }));
    } finally {
      setIsLoading(false);
    }
  };

  const testEngines = async () => {
    // Test Event Engine
    eventEngine.addEvent({
      type: 'info',
      category: 'system',
      title: 'Engine Test',
      description: 'Testing all engines functionality',
      source: 'System Test',
      severity: 'low'
    });

    // Test Task Queue Engine
    taskQueueEngine.createTask({
      name: 'Test Task',
      status: 'pending',
      progress: 0,
      category: 'system',
      priority: 'normal',
      maxRetries: 3
    });

    // Test Analytics Engine
    analyticsEngine.updateMetric({
      id: 'test_metric',
      name: 'Test Metric',
      value: Math.random() * 100,
      trend: 'up',
      category: 'performance',
      unit: 'count',
      timestamp: new Date()
    });

    // Test Content Engine
    contentEngine.createContent({
      title: 'Test Content',
      content: 'This is test content generated by the engine',
      type: 'post',
      status: 'draft',
      platforms: [],
      author: 'System',
      tags: ['test'],
      category: 'demo'
    });

    // Test AI Engine
    try {
      await aiEngine.generateContent('Test AI generation', 'content');
    } catch (error) {
      console.log('AI Engine test (expected to fail without backend)');
    }

    // Refresh stats
    setStatus(prev => ({
      ...prev,
      stats: {
        events: eventEngine.getEvents().length,
        tasks: taskQueueEngine.getTasks().length,
        metrics: analyticsEngine.getMetrics().length,
        content: contentEngine.getContent().length,
        aiRequests: aiEngine.getRequests().length
      }
    }));
  };

  if (isLoading) {
    return (
      <Card className="w-full max-w-4xl mx-auto">
        <CardContent className="p-8">
          <div className="flex items-center justify-center space-x-4">
            <Loader2 className="h-8 w-8 animate-spin text-green-500" />
            <div>
              <h3 className="text-lg font-semibold">Initializing VANTAGE AI System</h3>
              <p className="text-muted-foreground">Starting all engines and services...</p>
            </div>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="w-full max-w-6xl mx-auto space-y-6">
      {/* System Status Header */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-3">
            <Zap className="h-6 w-6 text-green-500" />
            VANTAGE AI System Status
            <Badge className={status.isInitialized ? 'status-success' : 'status-error'}>
              {status.isInitialized ? 'Online' : 'Offline'}
            </Badge>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
            {/* Engine Status */}
            <div className="space-y-2">
              <h4 className="font-medium flex items-center gap-2">
                <Activity className="h-4 w-4" />
                Event Engine
              </h4>
              <div className="flex items-center gap-2">
                {status.engines.event ? (
                  <CheckCircle2 className="h-4 w-4 text-green-500" />
                ) : (
                  <XCircle className="h-4 w-4 text-red-500" />
                )}
                <span className="text-sm">{status.stats.events} events</span>
              </div>
            </div>

            <div className="space-y-2">
              <h4 className="font-medium flex items-center gap-2">
                <Database className="h-4 w-4" />
                Task Queue
              </h4>
              <div className="flex items-center gap-2">
                {status.engines.task ? (
                  <CheckCircle2 className="h-4 w-4 text-green-500" />
                ) : (
                  <XCircle className="h-4 w-4 text-red-500" />
                )}
                <span className="text-sm">{status.stats.tasks} tasks</span>
              </div>
            </div>

            <div className="space-y-2">
              <h4 className="font-medium flex items-center gap-2">
                <BarChart3 className="h-4 w-4" />
                Analytics
              </h4>
              <div className="flex items-center gap-2">
                {status.engines.analytics ? (
                  <CheckCircle2 className="h-4 w-4 text-green-500" />
                ) : (
                  <XCircle className="h-4 w-4 text-red-500" />
                )}
                <span className="text-sm">{status.stats.metrics} metrics</span>
              </div>
            </div>

            <div className="space-y-2">
              <h4 className="font-medium flex items-center gap-2">
                <FileText className="h-4 w-4" />
                Content
              </h4>
              <div className="flex items-center gap-2">
                {status.engines.content ? (
                  <CheckCircle2 className="h-4 w-4 text-green-500" />
                ) : (
                  <XCircle className="h-4 w-4 text-red-500" />
                )}
                <span className="text-sm">{status.stats.content} items</span>
              </div>
            </div>

            <div className="space-y-2">
              <h4 className="font-medium flex items-center gap-2">
                <Brain className="h-4 w-4" />
                AI Engine
              </h4>
              <div className="flex items-center gap-2">
                {status.engines.ai ? (
                  <CheckCircle2 className="h-4 w-4 text-green-500" />
                ) : (
                  <XCircle className="h-4 w-4 text-red-500" />
                )}
                <span className="text-sm">{status.stats.aiRequests} requests</span>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Engine Details */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        <Card>
          <CardHeader>
            <CardTitle className="text-lg">Event Engine</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-sm text-muted-foreground mb-4">
              Real-time system events and monitoring
            </p>
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span>Total Events:</span>
                <span className="font-mono">{status.stats.events}</span>
              </div>
              <div className="flex justify-between text-sm">
                <span>Status:</span>
                <Badge className={status.engines.event ? 'status-success' : 'status-error'}>
                  {status.engines.event ? 'Active' : 'Inactive'}
                </Badge>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="text-lg">Task Queue Engine</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-sm text-muted-foreground mb-4">
              Background job processing and management
            </p>
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span>Total Tasks:</span>
                <span className="font-mono">{status.stats.tasks}</span>
              </div>
              <div className="flex justify-between text-sm">
                <span>Status:</span>
                <Badge className={status.engines.task ? 'status-success' : 'status-error'}>
                  {status.engines.task ? 'Active' : 'Inactive'}
                </Badge>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="text-lg">Analytics Engine</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-sm text-muted-foreground mb-4">
              Real-time metrics and data visualization
            </p>
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span>Metrics:</span>
                <span className="font-mono">{status.stats.metrics}</span>
              </div>
              <div className="flex justify-between text-sm">
                <span>Status:</span>
                <Badge className={status.engines.analytics ? 'status-success' : 'status-error'}>
                  {status.engines.analytics ? 'Active' : 'Inactive'}
                </Badge>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Test Controls */}
      <Card>
        <CardHeader>
          <CardTitle>Engine Testing</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex gap-4">
            <Button onClick={testEngines} className="btn-lattice">
              <Zap className="h-4 w-4 mr-2" />
              Test All Engines
            </Button>
            <Button onClick={initializeSystem} variant="outline">
              <Activity className="h-4 w-4 mr-2" />
              Reinitialize System
            </Button>
          </div>
          <p className="text-sm text-muted-foreground mt-2">
            Click "Test All Engines" to see the real functionality in action. 
            This will create events, tasks, metrics, and content using the actual engines.
          </p>
        </CardContent>
      </Card>
    </div>
  );
}
