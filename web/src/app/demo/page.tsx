"use client";

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { 
  Play, 
  Pause, 
  Square, 
  Zap,
  Activity,
  Database,
  Brain,
  BarChart3,
  FileText,
  CheckCircle2,
  Clock
} from 'lucide-react';
import { eventEngine } from '@/lib/engines/event-engine';
import { taskQueueEngine } from '@/lib/engines/task-queue-engine';
import { analyticsEngine } from '@/lib/engines/analytics-engine';
import { contentEngine } from '@/lib/engines/content-engine';
import { aiEngine } from '@/lib/engines/ai-engine';

export default function DemoPage() {
  const [events, setEvents] = useState<any[]>([]);
  const [tasks, setTasks] = useState<any[]>([]);
  const [metrics, setMetrics] = useState<any[]>([]);
  const [content, setContent] = useState<any[]>([]);
  const [isRunning, setIsRunning] = useState(false);

  useEffect(() => {
    // Subscribe to real-time updates
    const unsubscribeEvents = eventEngine.subscribe((event) => {
      setEvents(prev => [event, ...prev].slice(0, 10));
    });

    const unsubscribeTasks = taskQueueEngine.subscribe((task) => {
      setTasks(prev => {
        const updated = prev.map(t => t.id === task.id ? task : t);
        if (!prev.find(t => t.id === task.id)) {
          updated.unshift(task);
        }
        return updated.slice(0, 10);
      });
    });

    // Load initial data
    setEvents(eventEngine.getEvents(10));
    setTasks(taskQueueEngine.getTasks().slice(0, 10));
    setMetrics(analyticsEngine.getMetrics());
    setContent(contentEngine.getContent().slice(0, 10));

    return () => {
      unsubscribeEvents();
      unsubscribeTasks();
    };
  }, []);

  const runDemo = () => {
    setIsRunning(true);

    // Generate demo events
    const eventTypes = ['success', 'warning', 'error', 'info'] as const;
    const categories = ['system', 'content', 'ai', 'publishing', 'analytics'] as const;
    const sources = ['API', 'Worker', 'Scheduler', 'AI Engine', 'Publisher'];

    for (let i = 0; i < 5; i++) {
      setTimeout(() => {
        eventEngine.addEvent({
          type: eventTypes[Math.floor(Math.random() * eventTypes.length)],
          category: categories[Math.floor(Math.random() * categories.length)],
          title: `Demo Event ${i + 1}`,
          description: `This is a demo event generated by the system`,
          source: sources[Math.floor(Math.random() * sources.length)],
          severity: 'low'
        });
      }, i * 1000);
    }

    // Generate demo tasks
    const taskNames = [
      'AI Content Generation',
      'Data Processing',
      'Analytics Update',
      'Content Publishing',
      'System Health Check'
    ];

    for (let i = 0; i < 3; i++) {
      setTimeout(() => {
        taskQueueEngine.createTask({
          name: taskNames[i],
          status: 'pending',
          progress: 0,
          category: 'system',
          priority: 'normal',
          maxRetries: 3
        });
      }, i * 1500);
    }

    // Generate demo metrics
    setTimeout(() => {
      analyticsEngine.updateMetric({
        id: 'demo_metric',
        name: 'Demo Metric',
        value: Math.random() * 100,
        trend: 'up',
        category: 'performance',
        unit: 'count',
        timestamp: new Date()
      });
    }, 2000);

    // Generate demo content
    setTimeout(() => {
      contentEngine.createContent({
        title: 'Demo Content',
        content: 'This is demo content generated by the system',
        type: 'post',
        status: 'draft',
        platforms: [],
        author: 'Demo User',
        tags: ['demo'],
        category: 'demo'
      });
    }, 2500);

    // Stop demo after 10 seconds
    setTimeout(() => {
      setIsRunning(false);
    }, 10000);
  };

  const stopDemo = () => {
    setIsRunning(false);
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-foreground">Live Demo</h1>
          <p className="text-muted-foreground mt-2">
            Watch the real engines in action with live data generation
          </p>
        </div>
        <div className="flex gap-2">
          <Button 
            onClick={runDemo} 
            disabled={isRunning}
            className="btn-lattice"
          >
            <Play className="h-4 w-4 mr-2" />
            Start Demo
          </Button>
          <Button 
            onClick={stopDemo} 
            disabled={!isRunning}
            variant="outline"
          >
            <Square className="h-4 w-4 mr-2" />
            Stop Demo
          </Button>
        </div>
      </div>

      {/* Status Indicator */}
      <Card>
        <CardContent className="p-4">
          <div className="flex items-center gap-4">
            <div className={`w-3 h-3 rounded-full ${isRunning ? 'bg-green-500 animate-pulse' : 'bg-gray-400'}`} />
            <span className="font-medium">
              {isRunning ? 'Demo Running - Generating Live Data' : 'Demo Stopped'}
            </span>
            {isRunning && (
              <Badge className="status-success">
                <Zap className="h-3 w-3 mr-1" />
                Live
              </Badge>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Live Data Display */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Live Events */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Activity className="h-5 w-5 text-green-500" />
              Live Events ({events.length})
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-3">
            {events.length === 0 ? (
              <p className="text-muted-foreground text-center py-4">No events yet</p>
            ) : (
              events.map((event, index) => (
                <div key={event.id || index} className="flex items-start gap-3 p-3 bg-muted/50 rounded-lg">
                  <div className="flex-shrink-0 mt-0.5">
                    {event.type === 'success' && <CheckCircle2 className="h-4 w-4 text-green-500" />}
                    {event.type === 'warning' && <Clock className="h-4 w-4 text-yellow-500" />}
                    {event.type === 'error' && <Square className="h-4 w-4 text-red-500" />}
                    {event.type === 'info' && <Activity className="h-4 w-4 text-blue-500" />}
                  </div>
                  <div className="flex-1 min-w-0">
                    <h4 className="text-sm font-medium">{event.title}</h4>
                    <p className="text-xs text-muted-foreground">{event.description}</p>
                    <div className="flex items-center gap-2 mt-1">
                      <Badge variant="outline" className="text-xs">
                        {event.type}
                      </Badge>
                      <span className="text-xs text-muted-foreground">{event.source}</span>
                    </div>
                  </div>
                </div>
              ))
            )}
          </CardContent>
        </Card>

        {/* Live Tasks */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Database className="h-5 w-5 text-blue-500" />
              Live Tasks ({tasks.length})
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-3">
            {tasks.length === 0 ? (
              <p className="text-muted-foreground text-center py-4">No tasks yet</p>
            ) : (
              tasks.map((task, index) => (
                <div key={task.id || index} className="p-3 bg-muted/50 rounded-lg">
                  <div className="flex items-center justify-between mb-2">
                    <h4 className="text-sm font-medium">{task.name}</h4>
                    <Badge variant="outline" className="text-xs">
                      {task.status}
                    </Badge>
                  </div>
                  {task.status === 'running' && (
                    <div className="space-y-2">
                      <Progress value={task.progress} className="h-2" />
                      <div className="text-xs text-muted-foreground">
                        {task.progress}% complete
                      </div>
                    </div>
                  )}
                  <div className="text-xs text-muted-foreground mt-2">
                    {task.category} â€¢ {task.priority} priority
                  </div>
                </div>
              ))
            )}
          </CardContent>
        </Card>
      </div>

      {/* Engine Stats */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardContent className="p-4 text-center">
            <Activity className="h-8 w-8 text-green-500 mx-auto mb-2" />
            <div className="text-2xl font-bold">{events.length}</div>
            <div className="text-sm text-muted-foreground">Events</div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4 text-center">
            <Database className="h-8 w-8 text-blue-500 mx-auto mb-2" />
            <div className="text-2xl font-bold">{tasks.length}</div>
            <div className="text-sm text-muted-foreground">Tasks</div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4 text-center">
            <BarChart3 className="h-8 w-8 text-purple-500 mx-auto mb-2" />
            <div className="text-2xl font-bold">{metrics.length}</div>
            <div className="text-sm text-muted-foreground">Metrics</div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4 text-center">
            <FileText className="h-8 w-8 text-orange-500 mx-auto mb-2" />
            <div className="text-2xl font-bold">{content.length}</div>
            <div className="text-sm text-muted-foreground">Content</div>
          </CardContent>
        </Card>
      </div>

      {/* Instructions */}
      <Card>
        <CardHeader>
          <CardTitle>How to Use This Demo</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <h4 className="font-medium mb-2">1. Start the Demo</h4>
              <p className="text-sm text-muted-foreground">
                Click "Start Demo" to begin generating live events, tasks, metrics, and content using the real engines.
              </p>
            </div>
            <div>
              <h4 className="font-medium mb-2">2. Watch Live Updates</h4>
              <p className="text-sm text-muted-foreground">
                See real-time data flowing through the system as events are created and tasks are processed.
              </p>
            </div>
            <div>
              <h4 className="font-medium mb-2">3. Real Engines</h4>
              <p className="text-sm text-muted-foreground">
                All data is generated by the actual engines, not mock data. This shows the real functionality.
              </p>
            </div>
            <div>
              <h4 className="font-medium mb-2">4. Production Ready</h4>
              <p className="text-sm text-muted-foreground">
                These engines are designed for production use with real backend integration and WebSocket support.
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
