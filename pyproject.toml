[project]
name = "vantage-ai"
version = "1.0.0"
description = "VANTAGE AI - AI-powered content optimization platform"
dependencies = [
    "fastapi>=0.110",
    "uvicorn[standard]>=0.29",
    "stripe>=9,<11",
]

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "D",   # pydocstyle
    "S",   # flake8-bandit
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "C90", # mccabe
    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    "EM",  # flake8-errmsg
    "EXE", # flake8-executable
    "FA",  # flake8-future-annotations
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G",   # flake8-logging-format
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SLOT", # flake8-slots
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "INT", # flake8-gettext
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "PL",  # pylint
    "TRY", # tryceratops
    "FLY", # flynt
    "NPY", # numpy
    "AIR", # airflow
    "PERF", # perflint
    "FURB", # refurb
    "LOG", # flake8-logging
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "D100",  # Missing docstring in public module
    "D104",  # Missing docstring in public package
    "D213",  # Multi-line docstring summary should start at the second line
    "D203",  # 1 blank line required before class docstring
    "S101",  # Use of assert detected
    "PLR0913", # Too many arguments to function call
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
    "COM812", # Missing trailing comma
    "ISC001", # Implicitly concatenated string literals
    "T201",  # print found
    "Q000",  # Single quotes found but double quotes preferred
    "RET504", # Unnecessary assignment before return
    "SLF001", # Private member accessed
    "TRY003", # Avoid specifying long messages outside the exception class
    "PERF401", # Use a list comprehension instead of a for-loop
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
]
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "alembic/versions",
    "node_modules",
    ".pytest_cache",
    "dist",
    "build",
    "*.egg-info",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py

[tool.black]
target-version = ['py311']
line-length = 88
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
    | \.venv
    | alembic/versions
)/
'''

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
