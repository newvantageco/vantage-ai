version: '3.8'

services:
  # API Service
  api:
    build:
      context: .
      dockerfile: infra/Dockerfile.api
    image: vantage-ai/api:latest
    container_name: vantage-ai-api
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=${DATABASE_URL:-postgresql://vantage_user:password@postgres:5432/vantage_ai}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - META_APP_ID=${META_APP_ID}
      - META_APP_SECRET=${META_APP_SECRET}
      - LINKEDIN_CLIENT_ID=${LINKEDIN_CLIENT_ID}
      - LINKEDIN_CLIENT_SECRET=${LINKEDIN_CLIENT_SECRET}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET=${JWT_SECRET}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - vantage-network

  # Web Frontend
  web:
    build:
      context: .
      dockerfile: infra/Dockerfile.web
    image: vantage-ai/web:latest
    container_name: vantage-ai-web
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      - NODE_ENV=production
    ports:
      - "3000:3000"
    depends_on:
      - api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - vantage-network

  # Worker Service
  worker:
    build:
      context: .
      dockerfile: infra/Dockerfile.worker
    image: vantage-ai/worker:latest
    container_name: vantage-ai-worker
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=${DATABASE_URL:-postgresql://vantage_user:password@postgres:5432/vantage_ai}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - vantage-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: vantage-ai-postgres
    environment:
      - POSTGRES_DB=vantage_ai
      - POSTGRES_USER=vantage_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-vantage_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./alembic/versions:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vantage_user -d vantage_ai"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - vantage-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: vantage-ai-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - vantage-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: vantage-ai-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infra/nginx.conf:/etc/nginx/nginx.conf
      - ./infra/ssl:/etc/nginx/ssl
    depends_on:
      - api
      - web
    restart: unless-stopped
    networks:
      - vantage-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  vantage-network:
    driver: bridge
